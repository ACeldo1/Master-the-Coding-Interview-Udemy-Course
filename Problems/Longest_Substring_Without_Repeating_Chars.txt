/*
notes:
this is a sliding window problem, meaning we need to keep track of everything within the window as we
progress throughout the array

approach 1: sliding window
use two pointeers to keep track of the contents.
whenever we encounter a char that is not in the window, we move the right pointer along the array,
but we note the fact that if this char is encountered again, we no longer have a substring that is w/o
repeating chars
if we do encounter a char again we update the max length of the longest substring (if needed) and
we move the left pointer until we we encounter the char that was appeared again (currently pointed to by the right pointer), at this point, we remove the first occurrence so that we onl have one of that char (the second one encountered at right)
we continue this pattern until we reach the end of the array (with the right pointer)
*/
class Solution {
    public int lengthOfLongestSubstring(String s) {
        //added this if-else if condition fo edge cases
        if(s.length() == 1) return 1;
        else if (s.length() == 0) return 0;
        
        int left = 0, right = 0, res = Integer.MIN_VALUE;
        boolean[] ascii = new boolean[256];
        for(right = 0; right < s.length(); ++right) {
            if(ascii[s.charAt(right)]) {
                res = Math.max(res, right - left);
                while(ascii[s.charAt(right)]) ascii[s.charAt(left++)] = false;
                ascii[s.charAt(right)] = true;
            } else ascii[s.charAt(right)] = true;
        }
        return Math.max(res, right - left);
    }
} 